name: Security Scan Integration

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: "0 2 * * *"

jobs:
  security-scan:
    runs-on: ubuntu-latest
    outputs:
      security-status: ${{ steps.security-check.outputs.status }}
      critical-issues: ${{ steps.security-check.outputs.critical-issues }}
      high-issues: ${{ steps.security-check.outputs.high-issues }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci

      # Trivy Vulnerability Scanner
      - name: Run Trivy vulnerability scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"

      # Snyk Security Scan
      - name: Run Snyk security scan
        id: snyk-scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        id: owasp-scan
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "Shanal Cars"
          path: "."
          format: "JSON"
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      # Custom Security Analysis
      - name: Run custom security analysis
        id: custom-scan
        run: |
          # Check for hardcoded secrets
          if grep -r "sk_live_\|pk_live_\|AIza\|firebase" --include="*.ts" --include="*.js" --include="*.json" . | grep -v node_modules; then
            echo "❌ Hardcoded secrets detected"
            exit 1
          fi

          # Check for insecure dependencies
          npm audit --audit-level moderate --json > audit-results.json

          # Check for outdated packages
          npm outdated --json > outdated-packages.json

      # Process Security Results
      - name: Process security scan results
        id: security-check
        run: |
          # Process Trivy results
          if [ -f trivy-results.sarif ]; then
            CRITICAL_ISSUES=$(jq '.runs[0].results[] | select(.level == "error") | length' trivy-results.sarif | wc -l)
            HIGH_ISSUES=$(jq '.runs[0].results[] | select(.level == "warning") | length' trivy-results.sarif | wc -l)
          else
            CRITICAL_ISSUES=0
            HIGH_ISSUES=0
          fi

          # Process Snyk results
          if [ -f snyk-results.json ]; then
            SNYK_CRITICAL=$(jq '.vulnerabilities[] | select(.severity == "critical") | length' snyk-results.json | wc -l)
            SNYK_HIGH=$(jq '.vulnerabilities[] | select(.severity == "high") | length' snyk-results.json | wc -l)
          else
            SNYK_CRITICAL=0
            SNYK_HIGH=0
          fi

          # Process OWASP results
          if [ -f dependency-check-report.json ]; then
            OWASP_CRITICAL=$(jq '.dependencies[] | select(.vulnerabilities[] | .severity == "CRITICAL") | length' dependency-check-report.json | wc -l)
            OWASP_HIGH=$(jq '.dependencies[] | select(.vulnerabilities[] | .severity == "HIGH") | length' dependency-check-report.json | wc -l)
          else
            OWASP_CRITICAL=0
            OWASP_HIGH=0
          fi

          # Calculate totals
          TOTAL_CRITICAL=$((CRITICAL_ISSUES + SNYK_CRITICAL + OWASP_CRITICAL))
          TOTAL_HIGH=$((HIGH_ISSUES + SNYK_HIGH + OWASP_HIGH))

          # Determine security status
          if [ $TOTAL_CRITICAL -gt 0 ]; then
            SECURITY_STATUS="CRITICAL"
          elif [ $TOTAL_HIGH -gt 5 ]; then
            SECURITY_STATUS="HIGH"
          else
            SECURITY_STATUS="PASS"
          fi

          echo "security-status=$SECURITY_STATUS" >> $GITHUB_OUTPUT
          echo "critical-issues=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "high-issues=$TOTAL_HIGH" >> $GITHUB_OUTPUT

          # Create security report
          cat > security-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "status": "$SECURITY_STATUS",
            "critical_issues": $TOTAL_CRITICAL,
            "high_issues": $TOTAL_HIGH,
            "scans": {
              "trivy": {
                "critical": $CRITICAL_ISSUES,
                "high": $HIGH_ISSUES
              },
              "snyk": {
                "critical": $SNYK_CRITICAL,
                "high": $SNYK_HIGH
              },
              "owasp": {
                "critical": $OWASP_CRITICAL,
                "high": $OWASP_HIGH
              }
            }
          }
          EOF

      # Upload security results
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: security-report.json

      # Create security issues
      - name: Create security issues for critical vulnerabilities
        if: steps.security-check.outputs.critical-issues > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));

            const issueBody = `
            ## 🚨 Critical Security Vulnerabilities Detected

            **Scan Date:** ${report.timestamp}
            **Status:** ${report.status}
            **Critical Issues:** ${report.critical_issues}
            **High Issues:** ${report.high_issues}

            ### Scan Results:
            - **Trivy:** ${report.scans.trivy.critical} critical, ${report.scans.trivy.high} high
            - **Snyk:** ${report.scans.snyk.critical} critical, ${report.scans.snyk.high} high
            - **OWASP:** ${report.scans.owasp.critical} critical, ${report.scans.owasp.high} high

            ### Action Required:
            - [ ] Review and fix critical vulnerabilities
            - [ ] Update dependencies with known issues
            - [ ] Re-run security scans after fixes
            - [ ] Verify fixes with security team

            ### Security Labels:
            - \`security\`
            - \`critical\`
            - \`vulnerability\`
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Critical Security Vulnerabilities - ${report.timestamp}`,
              body: issueBody,
              labels: ['security', 'critical', 'vulnerability']
            });

      # Block deployment on critical issues
      - name: Block deployment on critical security issues
        if: steps.security-check.outputs.security-status == 'CRITICAL'
        run: |
          echo "❌ Deployment blocked due to critical security vulnerabilities"
          echo "Please fix critical security issues before deploying"
          exit 1

      # Notify security team
      - name: Notify security team
        if: steps.security-check.outputs.critical-issues > 0
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#security-alerts"
          webhook_url: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
          fields: |
            [
              {
                "title": "Security Scan Results",
                "value": "Critical: ${{ steps.security-check.outputs.critical-issues }}, High: ${{ steps.security-check.outputs.high-issues }}",
                "short": true
              },
              {
                "title": "Status",
                "value": "${{ steps.security-check.outputs.security-status }}",
                "short": true
              }
            ]

  # Security Gate for Deployment
  security-gate:
    runs-on: ubuntu-latest
    needs: security-scan
    if: needs.security-scan.outputs.security-status != 'CRITICAL'

    steps:
      - name: Security gate passed
        run: |
          echo "✅ Security gate passed"
          echo "Status: ${{ needs.security-scan.outputs.security-status }}"
          echo "Critical Issues: ${{ needs.security-scan.outputs.critical-issues }}"
          echo "High Issues: ${{ needs.security-scan.outputs.high-issues }}"

  # Update security dashboard
  update-security-dashboard:
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()

    steps:
      - name: Update security dashboard
        run: |
          # In a real implementation, this would update a security dashboard
          # with the latest scan results, trends, and metrics
          echo "Updating security dashboard with scan results"

          # Example: Update a security metrics database
          # curl -X POST https://security-dashboard.company.com/api/scan-results \
          #   -H "Authorization: Bearer ${{ secrets.SECURITY_DASHBOARD_TOKEN }}" \
          #   -H "Content-Type: application/json" \
          #   -d @security-report.json
